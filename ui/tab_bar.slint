import { VerticalBox, HorizontalBox, Palette } from "std-widgets.slint";

component TabItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text <=> label.text;

    callback clicked <=> touch.clicked;

    states [
        pressed when touch.pressed: {
            state.opacity: 0.8;
        }
        hover when touch.has-hover: {
            state.opacity: 0.6;
        }
        selected when root.selected: {
            state.opacity: 1;
        }
        focused when root.has-focus: {
            state.opacity: 0.8;
        }
    ]

    state := Rectangle {
        opacity: 0;
        background: Palette.background;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;

        animate opacity { duration: 150ms; }
    }

    l := HorizontalBox {
        padding-left: 16px;
        padding-right: 16px;
        spacing: 0px;

        label := Text {
            vertical-alignment: center;
        }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

export component TabBar {
    in property <[string]> tabs: [];
    out property <int> current-item: 0;
    out property <int> current-focused: fs.has-focus ? fs.focused-tab : -1;

    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: Palette.alternate-background;

        fs := FocusScope {
            key-pressed(event) => {
                if (event.text == "\n") {
                    root.current-item = root.current-focused;
                    return accept;
                }
                if (event.text == Key.UpArrow) {
                    self.focused-tab = Math.max(self.focused-tab - 1,  0);
                    return accept;
                }
                if (event.text == Key.DownArrow) {
                    self.focused-tab = Math.min(self.focused-tab + 1, root.tabs.length - 1);
                    return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                    root.current-item = root.current-focused;
                    return accept;
                }
                return reject;
            }

            property <int> focused-tab: 0;

            x: 0;
            width: 0;
        }
    }

    navigation := HorizontalLayout {
        padding-top: 8px;
        padding-left: 8px;
        padding-right: 8px;
        spacing: 8px;
        alignment: start;

        for item[index] in root.tabs: TabItem {
            clicked => {
                root.current-item = index;
            }

            has-focus: index == root.current-focused;
            text: item;
            selected: index == root.current-item;
        }
    }
}
